"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@humanwhocodes/momoa");class t extends Error{constructor(e){super(),this.issues=[];const t=new.target.prototype;Object.setPrototypeOf(this,t),this.issues=e}get message(){return JSON.stringify(this.issues,null,2)}}const o=new Set(["Feature"]),n=new Set(["Point","MultiPoint","Polygon","MultiPolygon","LineString","MultiLineString","GeometryCollection"]),s=new Set(["Point","MultiPoint","Polygon","MultiPolygon","LineString","MultiLineString"]),l=new Set([...n,"Feature","FeatureCollection"]);function i(e,o,n){if("Object"!==o.type)throw new t([{code:"invalid_type",message:"Expected an object, but found an incorrect type.",loc:o.loc}]);const s=o.members.find(e=>"type"===e.name.value);if(!s)throw new t([{code:"invalid_type",message:"This GeoJSON object is missing its type member.",loc:o.loc}]);const l=s.value;return"String"!==l.type?(e.push({code:"invalid_type",message:"The type member should have been a string.",loc:l.loc}),{}):n.has(l.value)?{type:l.value,objectNode:o}:(e.push({code:"invalid_type",message:"This type of GeoJSON object is not allowed here.",loc:l.loc}),{})}function r(e,t,o){const n=t.members.find(e=>e.name.value===o);return n?n.value:(e.push({code:"invalid_type",message:`This GeoJSON object requires a ${o} member but it is missing.`,loc:t.loc}),null)}function c(e,t){return"Array"===(null==t?void 0:t.type)?t:(t&&e.push({code:"invalid_type",message:"This must be an array.",loc:t.loc}),null)}function a(e,t){return"Object"===(null==t?void 0:t.type)?t:(t&&e.push({code:"invalid_type",message:"This must be an object.",loc:t.loc}),null)}function u(e,t){const o=r(e,t,"coordinates");return o?c(e,o):null}function m(e,t){if(null!==t){(t.elements.length<2||t.elements.length>3)&&e.push({code:"invalid_type",message:`A position should have 2 or 3 elements - found ${t.elements.length}.`,loc:t.loc});for(let o of t.elements)if("Number"!==o.type)return void e.push({code:"invalid_type",message:"Each element in a position must be a number.",loc:o.loc})}}function p(e,t){return"Array"!==t.type?(e.push({code:"invalid_type",message:"Expected to find an array of positions here.",loc:t.loc}),null):t}function d(e,t,o){if(null!==t&&(t=p(e,t))){for(let o of t.elements){if("Array"!==o.type)return void e.push({code:"invalid_type",message:"Expected to find a position here, found another type.",loc:o.loc});m(e,o)}switch(o){case"LineString":t.elements.length<2&&e.push({code:"invalid_type",message:"Expected to find two or more positions here.",loc:t.loc});break;case"Polygon":t.elements.length<4&&e.push({code:"invalid_type",message:"Expected to find four or more positions here.",loc:t.loc}),function(e,t){const o=t.elements[0],n=t.elements[t.elements.length-1];if(o.elements.length===n.elements.length){for(let t=0;t<o.elements.length;t++)if(o.elements[t].value!==n.elements[t].value)return void e.push({code:"invalid_type",message:"First and last positions of a Polygon or MultiPolygon’s ring should be the same.",loc:n.elements[t].loc})}else e.push({code:"invalid_type",message:"First and last positions of a Polygon or MultiPolygon’s ring should be the same.",loc:o.loc})}(e,t)}}}function f(e,t,o){if(null!==t&&(t=p(e,t)))for(let n of t.elements)d(e,n,o)}function g(e,t){const o=t.members.find(e=>"bbox"===e.name.value);if(void 0===o)return;const n=c(e,o.value);if(n){4!==n.elements.length&&6!==n.elements.length&&e.push({code:"invalid_type",message:"A bbox must have 4 or 6 positions",loc:n.loc});for(let t of n.elements)if("Number"!==t.type)return void e.push({code:"invalid_type",message:"Each element in a bbox must be a number.",loc:t.loc})}}function h(e,t,o,n){t.name.value===n&&e.push({code:"invalid_type",message:`${o} objects cannot contain a member named ${t.name.value}`,loc:t.name.loc})}const y={Geometry:["properties","geometry","features"],Feature:["features"],FeatureCollection:["properties","coordinates"]};function v(e,t,o){for(let n of t.members)for(let t of y[o])h(e,n,o,t)}const b=(e,t)=>{g(e,t),v(e,t,"Geometry")},_=(e,t)=>{v(e,t,"Feature");const o=r(e,t,"geometry");if(g(e,t),"Null"!==(null==o?void 0:o.type)){const t=a(e,o);t&&S(e,t,n)}const s=t.members.find(e=>"id"===e.name.value);s&&"String"!==s.value.type&&"Number"!==s.value.type&&e.push({code:"invalid_type",message:"The Feature id must be a string or number.",loc:s.loc});const l=r(e,t,"properties");if(!l)return void e.push({code:"invalid_type",message:"The properties member is missing.",loc:t.loc});const{type:i}=l;"Object"!==i&&"Null"!==i&&e.push({code:"invalid_type",message:"The Feature properties member can be an object or null.",loc:t.loc})},P={LineString:(e,t)=>{d(e,u(e,t),"LineString"),b(e,t)},MultiLineString:(e,t)=>{f(e,u(e,t),"LineString"),b(e,t)},Polygon:(e,t)=>{f(e,u(e,t),"Polygon"),b(e,t)},MultiPolygon:(e,t)=>{!function(e,t,o){if(null!==t&&(t=p(e,t)))for(let o of t.elements)f(e,o,"Polygon")}(e,u(e,t)),b(e,t)},Point:(e,t)=>{m(e,u(e,t)),b(e,t)},MultiPoint:(e,t)=>{d(e,u(e,t)),b(e,t)},GeometryCollection:(e,t)=>{b(e,t);const o=c(e,r(e,t,"geometries"));if(o)for(let t of o.elements)S(e,t,s)},Feature:_,FeatureCollection:(e,t)=>{v(e,t,"FeatureCollection");const n=c(e,r(e,t,"features"));if(n)for(let t of n.elements){const n=a(e,t);n&&(i(e,n,o),_(e,n))}}};function S(e,t,o=l){const{type:n,objectNode:s}=i(e,t,o);n&&s&&(function(e,t){let o=new Set;for(let{name:{value:n},loc:s}of t.members)o.has(n)&&e.push({code:"invalid_type",message:"Duplicate properties are ambiguous in GeoJSON",loc:s}),o.add(n)}(e,s),P[n](e,s))}exports.HintError=t,exports.check=o=>{const n=[];let s;try{s=e.parse(o,{ranges:!0})}catch(e){n.push({code:"invalid_json",line:e.line})}if(s&&S(n,s.body),n.length||!s)throw new t(n);return e.evaluate(s)};
//# sourceMappingURL=check-geojson.cjs.production.min.js.map
