{"version":3,"file":"check-geojson.cjs.production.min.js","sources":["../src/errors.ts","../src/types.ts","../src/get_type.ts","../src/get_member_value.ts","../src/get_array.ts","../src/get_object.ts","../src/get_coordinates.ts","../src/enforce_position.ts","../src/enforce_position_array.ts","../src/enforce_same_position.ts","../src/enforce_bbox.ts","../src/forbid_confusing_properties.ts","../src/index.ts","../src/check_duplicate_keys.ts"],"sourcesContent":["import { LocRange } from '@humanwhocodes/momoa';\n\ninterface HintIssueType {\n  code: 'invalid_type';\n  loc: LocRange;\n  // code: ZodIssueCode;\n  message?: string;\n}\n\ninterface HintJSONIssue {\n  code: 'invalid_json';\n  line: number;\n}\n\nexport type HintIssue = HintIssueType | HintJSONIssue;\n\nexport class HintError extends Error {\n  issues: HintIssue[] = [];\n\n  constructor(issues: HintIssue[]) {\n    super();\n    // restore prototype chain\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n    this.issues = issues;\n  }\n\n  get message() {\n    return JSON.stringify(this.issues, null, 2);\n  }\n}\n","import { GeoJSON } from 'geojson';\n\nexport type GeoJSONTypeSet = Set<GeoJSON['type']>;\n\nexport const GEOJSON_FEATURE_TYPE = new Set<GeoJSON['type']>(['Feature']);\n\nexport const GEOJSON_GEOMETRY_TYPES = new Set<GeoJSON['type']>([\n  'Point',\n  'MultiPoint',\n  'Polygon',\n  'MultiPolygon',\n  'LineString',\n  'MultiLineString',\n  'GeometryCollection',\n]);\n\nexport const GEOJSON_GEOMETRY_TYPES_EX_GEOMETRY_COLLECTION = new Set<\n  GeoJSON['type']\n>([\n  'Point',\n  'MultiPoint',\n  'Polygon',\n  'MultiPolygon',\n  'LineString',\n  'MultiLineString',\n]);\n\nexport const GEOJSON_TYPES = new Set<GeoJSON['type']>([\n  ...GEOJSON_GEOMETRY_TYPES,\n  'Feature',\n  'FeatureCollection',\n]);\n","import { GeoJSONTypeSet } from './types';\nimport { GeoJSON } from 'geojson';\nimport { HintIssue, HintError } from './errors';\nimport { Node } from '@humanwhocodes/momoa';\n\nexport function getType(\n  issues: HintIssue[],\n  node: Node,\n  allowedTypes: GeoJSONTypeSet\n) {\n  if (node.type !== 'Object') {\n    throw new HintError([\n      {\n        code: 'invalid_type',\n        message: 'Expected an object, but found an incorrect type.',\n        loc: node.loc,\n      },\n    ]);\n  }\n\n  const typeMember = node.members.find(member => {\n    return member.name.value === 'type';\n  });\n\n  if (!typeMember) {\n    throw new HintError([\n      {\n        code: 'invalid_type',\n        message: 'This GeoJSON object is missing its type member.',\n        loc: node.loc,\n      },\n    ]);\n  }\n\n  const value = typeMember.value;\n\n  if (value.type !== 'String') {\n    issues.push({\n      code: 'invalid_type',\n      message: 'The type member should have been a string.',\n      loc: value.loc,\n    });\n\n    return {};\n  }\n\n  if (!allowedTypes.has(value.value as any)) {\n    issues.push({\n      code: 'invalid_type',\n      message: 'This type of GeoJSON object is not allowed here.',\n      loc: value.loc,\n    });\n\n    return {};\n  }\n\n  return {\n    type: value.value as GeoJSON['type'],\n    objectNode: node,\n  };\n}\n","import { HintIssue } from './errors';\nimport { ObjectNode } from '@humanwhocodes/momoa';\n\nexport function getMemberValue(\n  issues: HintIssue[],\n  node: ObjectNode,\n  name: string\n) {\n  const member = node.members.find(member => {\n    return member.name.value === name;\n  });\n\n  if (!member) {\n    issues.push({\n      code: 'invalid_type',\n      message: `This GeoJSON object requires a ${name} member but it is missing.`,\n      loc: node.loc,\n    });\n\n    return null;\n  }\n\n  return member.value;\n}\n","import { HintIssue } from './errors';\nimport { Node, ArrayNode } from '@humanwhocodes/momoa';\n\nexport function getArray(\n  issues: HintIssue[],\n  node: Node | null\n): ArrayNode | null {\n  if (node?.type === 'Array') return node;\n  if (node) {\n    issues.push({\n      code: 'invalid_type',\n      message: 'This must be an array.',\n      loc: node.loc,\n    });\n  }\n  return null;\n}\n","import { HintIssue } from './errors';\nimport { Node, ObjectNode } from '@humanwhocodes/momoa';\n\nexport function getObject(\n  issues: HintIssue[],\n  node: Node | null\n): ObjectNode | null {\n  if (node?.type === 'Object') return node;\n  if (node) {\n    issues.push({\n      code: 'invalid_type',\n      message: 'This must be an object.',\n      loc: node.loc,\n    });\n  }\n  return null;\n}\n","import { HintIssue } from './errors';\nimport { ObjectNode } from '@humanwhocodes/momoa';\nimport { getMemberValue } from './get_member_value';\nimport { getArray } from './get_array';\n\nexport function getCoordinates(issues: HintIssue[], node: ObjectNode) {\n  const coordinatesMember = getMemberValue(issues, node, 'coordinates');\n  if (!coordinatesMember) return null;\n  return getArray(issues, coordinatesMember);\n}\n","import { HintIssue } from './errors';\nimport { ArrayNode } from '@humanwhocodes/momoa';\n\nexport function enforcePosition(issues: HintIssue[], node: ArrayNode | null) {\n  // This error has already been caught. Allow a no-op for simplicity.\n  if (node === null) return;\n\n  if (node.elements.length < 2 || node.elements.length > 3) {\n    issues.push({\n      code: 'invalid_type',\n      message: `A position should have 2 or 3 elements - found ${node.elements.length}.`,\n      loc: node.loc,\n    });\n  }\n\n  for (let element of node.elements) {\n    if (element.type !== 'Number') {\n      issues.push({\n        code: 'invalid_type',\n        message: 'Each element in a position must be a number.',\n        loc: element.loc,\n      });\n      return;\n    }\n  }\n}\n","import { HintIssue } from './errors';\nimport { enforcePosition } from './enforce_position';\nimport { enforceSamePosition } from './enforce_same_position';\nimport { Node, ArrayNode } from '@humanwhocodes/momoa';\n\nfunction getArray(issues: HintIssue[], node: Node): ArrayNode | null {\n  if (node.type !== 'Array') {\n    issues.push({\n      code: 'invalid_type',\n      message: 'Expected to find an array of positions here.',\n      loc: node.loc,\n    });\n    return null;\n  }\n  return node;\n}\n\ntype PositionKind = 'Polygon' | 'LineString';\n\nexport function enforcePositionArray(\n  issues: HintIssue[],\n  node: Node | null,\n  kind?: PositionKind\n) {\n  // This error has already been caught. Allow a no-op for simplicity.\n  if (node === null) return;\n\n  node = getArray(issues, node);\n  if (!node) return;\n\n  for (let element of node.elements) {\n    if (element.type !== 'Array') {\n      issues.push({\n        code: 'invalid_type',\n        message: 'Expected to find a position here, found another type.',\n        loc: element.loc,\n      });\n      return;\n    } else {\n      enforcePosition(issues, element);\n    }\n  }\n\n  switch (kind) {\n    case 'LineString': {\n      if (node.elements.length < 2) {\n        issues.push({\n          code: 'invalid_type',\n          message: 'Expected to find two or more positions here.',\n          loc: node.loc,\n        });\n      }\n      break;\n    }\n    case 'Polygon':\n      if (node.elements.length < 4) {\n        issues.push({\n          code: 'invalid_type',\n          message: 'Expected to find four or more positions here.',\n          loc: node.loc,\n        });\n      }\n      enforceSamePosition(issues, node);\n      break;\n  }\n}\n\nexport function enforcePositionArray2(\n  issues: HintIssue[],\n  node: Node | null,\n  kind?: PositionKind\n) {\n  // This error has already been caught. Allow a no-op for simplicity.\n  if (node === null) return;\n\n  node = getArray(issues, node);\n  if (!node) return;\n\n  for (let element of node.elements) {\n    enforcePositionArray(issues, element, kind);\n  }\n}\n\nexport function enforcePositionArray3(\n  issues: HintIssue[],\n  node: ArrayNode | null,\n  kind?: PositionKind\n) {\n  // This error has already been caught. Allow a no-op for simplicity.\n  if (node === null) return;\n\n  node = getArray(issues, node);\n  if (!node) return;\n\n  for (let element of node.elements) {\n    enforcePositionArray2(issues, element, kind);\n  }\n}\n","import { HintIssue } from './errors';\nimport { ArrayNode, NumberNode } from '@humanwhocodes/momoa';\n\nexport function enforceSamePosition(issues: HintIssue[], node: ArrayNode) {\n  const first = node.elements[0] as ArrayNode;\n  const last = node.elements[node.elements.length - 1] as ArrayNode;\n\n  if (first.elements.length !== last.elements.length) {\n    issues.push({\n      code: 'invalid_type',\n      message:\n        'First and last positions of a Polygon or MultiPolygon’s ring should be the same.',\n      loc: first.loc,\n    });\n    return;\n  }\n\n  for (let j = 0; j < first.elements.length; j++) {\n    const firstValue = (first.elements[j] as NumberNode).value;\n    const secondValue = (last.elements[j] as NumberNode).value;\n    if (firstValue !== secondValue) {\n      issues.push({\n        code: 'invalid_type',\n        message:\n          'First and last positions of a Polygon or MultiPolygon’s ring should be the same.',\n        loc: last.elements[j].loc,\n      });\n      return;\n    }\n  }\n}\n","import { HintIssue } from './errors';\nimport { ObjectNode } from '@humanwhocodes/momoa';\nimport { getArray } from './get_array';\n\nexport function enforceBbox(issues: HintIssue[], node: ObjectNode) {\n  const member = node.members.find(member => {\n    return member.name.value === 'bbox';\n  });\n\n  // bboxes are optional\n  if (member === undefined) return;\n\n  const array = getArray(issues, member.value);\n\n  if (!array) return;\n\n  if (!(array.elements.length === 4 || array.elements.length === 6)) {\n    issues.push({\n      code: 'invalid_type',\n      message: 'A bbox must have 4 or 6 positions',\n      loc: array.loc,\n    });\n  }\n\n  for (let element of array.elements) {\n    if (element.type !== 'Number') {\n      issues.push({\n        code: 'invalid_type',\n        message: 'Each element in a bbox must be a number.',\n        loc: element.loc,\n      });\n      return;\n    }\n  }\n}\n","import { HintIssue } from './errors';\nimport { ObjectNode, MemberNode } from '@humanwhocodes/momoa';\n\ntype PropertiesFrom = 'Feature' | 'FeatureCollection' | 'Geometry';\n\nfunction forbidProperty(\n  issues: HintIssue[],\n  member: MemberNode,\n  propertiesFrom: PropertiesFrom,\n  name: string\n) {\n  if (member.name.value === name) {\n    issues.push({\n      code: 'invalid_type',\n      message: `${propertiesFrom} objects cannot contain a member named ${member.name.value}`,\n      loc: member.name.loc,\n    });\n  }\n}\n\nconst FORBIDDEN_PROPERTIES = {\n  Geometry: ['properties', 'geometry', 'features'],\n  Feature: ['features'],\n  FeatureCollection: ['properties', 'coordinates'],\n};\n\nexport function forbidConfusingProperties(\n  issues: HintIssue[],\n  node: ObjectNode,\n  propertiesFrom: PropertiesFrom\n) {\n  for (let member of node.members) {\n    for (let property of FORBIDDEN_PROPERTIES[propertiesFrom]) {\n      forbidProperty(issues, member, propertiesFrom, property);\n    }\n  }\n}\n","import { parse, evaluate, Node, ObjectNode } from '@humanwhocodes/momoa';\nimport { GeoJSON } from 'geojson';\nimport { HintIssue, HintError } from './errors';\nimport {\n  GeoJSONTypeSet,\n  GEOJSON_TYPES,\n  GEOJSON_GEOMETRY_TYPES,\n  GEOJSON_GEOMETRY_TYPES_EX_GEOMETRY_COLLECTION,\n  GEOJSON_FEATURE_TYPE,\n} from './types';\nimport { getType } from './get_type';\nimport { getMemberValue } from './get_member_value';\nimport { getArray } from './get_array';\nimport { getObject } from './get_object';\nimport { getCoordinates } from './get_coordinates';\nimport { enforcePosition } from './enforce_position';\nimport { checkDuplicateKeys } from './check_duplicate_keys';\nimport {\n  enforcePositionArray,\n  enforcePositionArray2,\n  enforcePositionArray3,\n} from './enforce_position_array';\nimport { enforceBbox } from './enforce_bbox';\nimport { forbidConfusingProperties } from './forbid_confusing_properties';\n\ntype Checker = (issues: HintIssue[], node: ObjectNode) => void;\n\nconst checkGeometryShared: Checker = (issues, node) => {\n  enforceBbox(issues, node);\n  forbidConfusingProperties(issues, node, 'Geometry');\n};\n\nconst checkLineString: Checker = (issues, node) => {\n  enforcePositionArray(issues, getCoordinates(issues, node), 'LineString');\n  checkGeometryShared(issues, node);\n};\n\nconst checkMultiLineString: Checker = (issues, node) => {\n  enforcePositionArray2(issues, getCoordinates(issues, node), 'LineString');\n  checkGeometryShared(issues, node);\n};\n\nconst checkPolygon: Checker = (issues, node) => {\n  enforcePositionArray2(issues, getCoordinates(issues, node), 'Polygon');\n  checkGeometryShared(issues, node);\n};\n\nconst checkMultiPolygon: Checker = (issues, node) => {\n  enforcePositionArray3(issues, getCoordinates(issues, node), 'Polygon');\n  checkGeometryShared(issues, node);\n};\n\nconst checkPoint: Checker = (issues, node) => {\n  enforcePosition(issues, getCoordinates(issues, node));\n  checkGeometryShared(issues, node);\n};\n\nconst checkMultiPoint: Checker = (issues, node) => {\n  enforcePositionArray(issues, getCoordinates(issues, node));\n  checkGeometryShared(issues, node);\n};\n\nconst checkGeometryCollection: Checker = (issues, node) => {\n  checkGeometryShared(issues, node);\n  const geometriesMember = getArray(\n    issues,\n    getMemberValue(issues, node, 'geometries')\n  );\n  if (!geometriesMember) return;\n  for (let element of geometriesMember.elements) {\n    checkObject(issues, element, GEOJSON_GEOMETRY_TYPES_EX_GEOMETRY_COLLECTION);\n  }\n};\n\nconst checkFeature: Checker = (issues, node) => {\n  forbidConfusingProperties(issues, node, 'Feature');\n  const geometryMember = getMemberValue(issues, node, 'geometry');\n  enforceBbox(issues, node);\n  if (geometryMember?.type !== 'Null') {\n    const geometry = getObject(issues, geometryMember);\n    if (geometry) checkObject(issues, geometry, GEOJSON_GEOMETRY_TYPES);\n  }\n\n  const idMember = node.members.find(member => {\n    return member.name.value === 'id';\n  });\n  if (\n    idMember &&\n    !(idMember.value.type === 'String' || idMember.value.type === 'Number')\n  ) {\n    issues.push({\n      code: 'invalid_type',\n      message: `The Feature id must be a string or number.`,\n      loc: idMember.loc,\n    });\n  }\n\n  const properties = getMemberValue(issues, node, 'properties');\n  if (!properties) {\n    issues.push({\n      code: 'invalid_type',\n      message: `The properties member is missing.`,\n      loc: node.loc,\n    });\n    return;\n  }\n\n  const { type } = properties;\n\n  if (!(type === 'Object' || type === 'Null')) {\n    issues.push({\n      code: 'invalid_type',\n      message: `The Feature properties member can be an object or null.`,\n      loc: node.loc,\n    });\n  }\n};\n\nconst checkFeatureCollection: Checker = (issues, node) => {\n  forbidConfusingProperties(issues, node, 'FeatureCollection');\n  const featuresMember = getArray(\n    issues,\n    getMemberValue(issues, node, 'features')\n  );\n  if (!featuresMember) return;\n  for (let feature of featuresMember.elements) {\n    const obj = getObject(issues, feature);\n    if (obj) {\n      getType(issues, obj, GEOJSON_FEATURE_TYPE);\n      checkFeature(issues, obj);\n    }\n  }\n};\n\nconst CHECKERS: Record<GeoJSON['type'], Checker> = {\n  LineString: checkLineString,\n  MultiLineString: checkMultiLineString,\n\n  Polygon: checkPolygon,\n  MultiPolygon: checkMultiPolygon,\n\n  Point: checkPoint,\n  MultiPoint: checkMultiPoint,\n\n  GeometryCollection: checkGeometryCollection,\n\n  Feature: checkFeature,\n  FeatureCollection: checkFeatureCollection,\n};\n\nfunction checkObject(\n  issues: HintIssue[],\n  node: Node,\n  typeSet: GeoJSONTypeSet = GEOJSON_TYPES\n) {\n  const { type, objectNode } = getType(issues, node, typeSet);\n  if (!(type && objectNode)) return;\n  checkDuplicateKeys(issues, objectNode);\n  CHECKERS[type](issues, objectNode);\n}\n\nexport const check = (jsonStr: string): GeoJSON => {\n  const issues: HintIssue[] = [];\n  let ast;\n  try {\n    ast = parse(jsonStr, {\n      ranges: true,\n    });\n  } catch (e) {\n    issues.push({\n      code: 'invalid_json',\n      line: e.line,\n    });\n  }\n  if (ast) checkObject(issues, ast.body);\n  if (issues.length || !ast) throw new HintError(issues);\n  return evaluate(ast);\n};\n\nexport { HintError, HintIssue };\n","import { HintIssue } from './errors';\nimport { ObjectNode } from '@humanwhocodes/momoa';\n\nexport function checkDuplicateKeys(\n  issues: HintIssue[],\n  node: ObjectNode\n): ObjectNode {\n  let keys = new Set<string>();\n  for (let {\n    name: { value },\n    loc,\n  } of node.members) {\n    if (keys.has(value)) {\n      issues.push({\n        code: 'invalid_type',\n        message: 'Duplicate properties are ambiguous in GeoJSON',\n        loc: loc,\n      });\n    }\n    keys.add(value);\n  }\n  return node;\n}\n"],"names":["HintError","Error","constructor","issues","actualProto","prototype","Object","setPrototypeOf","this","JSON","stringify","GEOJSON_FEATURE_TYPE","Set","GEOJSON_GEOMETRY_TYPES","GEOJSON_GEOMETRY_TYPES_EX_GEOMETRY_COLLECTION","GEOJSON_TYPES","getType","node","allowedTypes","type","code","message","loc","typeMember","members","find","member","name","value","push","has","objectNode","getMemberValue","getArray","getObject","getCoordinates","coordinatesMember","enforcePosition","elements","length","element","enforcePositionArray","kind","first","last","j","enforceSamePosition","enforcePositionArray2","enforceBbox","undefined","array","forbidProperty","propertiesFrom","FORBIDDEN_PROPERTIES","Geometry","Feature","FeatureCollection","forbidConfusingProperties","property","checkGeometryShared","checkFeature","geometryMember","geometry","checkObject","idMember","properties","CHECKERS","LineString","MultiLineString","Polygon","MultiPolygon","enforcePositionArray3","Point","MultiPoint","GeometryCollection","geometriesMember","featuresMember","feature","obj","typeSet","keys","add","checkDuplicateKeys","jsonStr","ast","parse","ranges","e","line","body","evaluate"],"mappings":"gHAgBaA,UAAkBC,MAG7BC,YAAYC,uBAFU,SAKdC,aAAyBC,UAC/BC,OAAOC,eAAeC,KAAMJ,QACvBD,OAASA,uBAIPM,KAAKC,UAAUF,KAAKL,OAAQ,KAAM,ICxBtC,MAAMQ,EAAuB,IAAIC,IAAqB,CAAC,YAEjDC,EAAyB,IAAID,IAAqB,CAC7D,QACA,aACA,UACA,eACA,aACA,kBACA,uBAGWE,EAAgD,IAAIF,IAE/D,CACA,QACA,aACA,UACA,eACA,aACA,oBAGWG,EAAgB,IAAIH,IAAqB,IACjDC,EACH,UACA,+BCzBcG,EACdb,EACAc,EACAC,MAEkB,WAAdD,EAAKE,WACD,IAAInB,EAAU,CAClB,CACEoB,KAAM,eACNC,QAAS,mDACTC,IAAKL,EAAKK,aAKVC,EAAaN,EAAKO,QAAQC,KAAKC,GACN,SAAtBA,EAAOC,KAAKC,WAGhBL,QACG,IAAIvB,EAAU,CAClB,CACEoB,KAAM,eACNC,QAAS,kDACTC,IAAKL,EAAKK,aAKVM,EAAQL,EAAWK,YAEN,WAAfA,EAAMT,MACRhB,EAAO0B,KAAK,CACVT,KAAM,eACNC,QAAS,6CACTC,IAAKM,EAAMN,MAGN,IAGJJ,EAAaY,IAAIF,EAAMA,OAUrB,CACLT,KAAMS,EAAMA,MACZG,WAAYd,IAXZd,EAAO0B,KAAK,CACVT,KAAM,eACNC,QAAS,mDACTC,IAAKM,EAAMN,MAGN,aClDKU,EACd7B,EACAc,EACAU,SAEMD,EAAST,EAAKO,QAAQC,KAAKC,GACxBA,EAAOC,KAAKC,QAAUD,UAG1BD,EAUEA,EAAOE,OATZzB,EAAO0B,KAAK,CACVT,KAAM,eACNC,0CAA2CM,8BAC3CL,IAAKL,EAAKK,MAGL,eChBKW,EACd9B,EACAc,SAEmB,iBAAfA,SAAAA,EAAME,MAAyBF,GAC/BA,GACFd,EAAO0B,KAAK,CACVT,KAAM,eACNC,QAAS,yBACTC,IAAKL,EAAKK,MAGP,eCZOY,EACd/B,EACAc,SAEmB,kBAAfA,SAAAA,EAAME,MAA0BF,GAChCA,GACFd,EAAO0B,KAAK,CACVT,KAAM,eACNC,QAAS,0BACTC,IAAKL,EAAKK,MAGP,eCVOa,EAAehC,EAAqBc,SAC5CmB,EAAoBJ,EAAe7B,EAAQc,EAAM,sBAClDmB,EACEH,EAAS9B,EAAQiC,GADO,cCJjBC,EAAgBlC,EAAqBc,MAEtC,OAATA,IAEAA,EAAKqB,SAASC,OAAS,GAAKtB,EAAKqB,SAASC,OAAS,IACrDpC,EAAO0B,KAAK,CACVT,KAAM,eACNC,0DAA2DJ,EAAKqB,SAASC,UACzEjB,IAAKL,EAAKK,UAIT,IAAIkB,KAAWvB,EAAKqB,YACF,WAAjBE,EAAQrB,iBACVhB,EAAO0B,KAAK,CACVT,KAAM,eACNC,QAAS,+CACTC,IAAKkB,EAAQlB,OCfrB,SAASW,EAAS9B,EAAqBc,SACnB,UAAdA,EAAKE,MACPhB,EAAO0B,KAAK,CACVT,KAAM,eACNC,QAAS,+CACTC,IAAKL,EAAKK,MAEL,MAEFL,EAKT,SAAgBwB,EACdtC,EACAc,EACAyB,MAGa,OAATzB,IAEJA,EAAOgB,EAAS9B,EAAQc,SAGnB,IAAIuB,KAAWvB,EAAKqB,SAAU,IACZ,UAAjBE,EAAQrB,iBACVhB,EAAO0B,KAAK,CACVT,KAAM,eACNC,QAAS,wDACTC,IAAKkB,EAAQlB,MAIfe,EAAgBlC,EAAQqC,UAIpBE,OACD,aACCzB,EAAKqB,SAASC,OAAS,GACzBpC,EAAO0B,KAAK,CACVT,KAAM,eACNC,QAAS,+CACTC,IAAKL,EAAKK,gBAKX,UACCL,EAAKqB,SAASC,OAAS,GACzBpC,EAAO0B,KAAK,CACVT,KAAM,eACNC,QAAS,gDACTC,IAAKL,EAAKK,eCxDgBnB,EAAqBc,SACjD0B,EAAQ1B,EAAKqB,SAAS,GACtBM,EAAO3B,EAAKqB,SAASrB,EAAKqB,SAASC,OAAS,MAE9CI,EAAML,SAASC,SAAWK,EAAKN,SAASC,YAUvC,IAAIM,EAAI,EAAGA,EAAIF,EAAML,SAASC,OAAQM,OACrBF,EAAML,SAASO,GAAkBjB,QAChCgB,EAAKN,SAASO,GAAkBjB,kBAEnDzB,EAAO0B,KAAK,CACVT,KAAM,eACNC,QACE,mFACFC,IAAKsB,EAAKN,SAASO,GAAGvB,WAjB1BnB,EAAO0B,KAAK,CACVT,KAAM,eACNC,QACE,mFACFC,IAAKqB,EAAMrB,MDkDXwB,CAAoB3C,EAAQc,KAKlC,SAAgB8B,EACd5C,EACAc,EACAyB,MAGa,OAATzB,IAEJA,EAAOgB,EAAS9B,EAAQc,QAGnB,IAAIuB,KAAWvB,EAAKqB,SACvBG,EAAqBtC,EAAQqC,EAASE,YE3E1BM,EAAY7C,EAAqBc,SACzCS,EAAST,EAAKO,QAAQC,KAAKC,GACF,SAAtBA,EAAOC,KAAKC,eAINqB,IAAXvB,EAAsB,aAEpBwB,EAAQjB,EAAS9B,EAAQuB,EAAOE,UAEjCsB,GAE2B,IAA1BA,EAAMZ,SAASC,QAA0C,IAA1BW,EAAMZ,SAASC,QAClDpC,EAAO0B,KAAK,CACVT,KAAM,eACNC,QAAS,oCACTC,IAAK4B,EAAM5B,UAIV,IAAIkB,KAAWU,EAAMZ,YACH,WAAjBE,EAAQrB,iBACVhB,EAAO0B,KAAK,CACVT,KAAM,eACNC,QAAS,2CACTC,IAAKkB,EAAQlB,OCxBrB,SAAS6B,EACPhD,EACAuB,EACA0B,EACAzB,GAEID,EAAOC,KAAKC,QAAUD,GACxBxB,EAAO0B,KAAK,CACVT,KAAM,eACNC,WAAY+B,2CAAwD1B,EAAOC,KAAKC,QAChFN,IAAKI,EAAOC,KAAKL,MAKvB,MAAM+B,EAAuB,CAC3BC,SAAU,CAAC,aAAc,WAAY,YACrCC,QAAS,CAAC,YACVC,kBAAmB,CAAC,aAAc,gBAGpC,SAAgBC,EACdtD,EACAc,EACAmC,OAEK,IAAI1B,KAAUT,EAAKO,YACjB,IAAIkC,KAAYL,EAAqBD,GACxCD,EAAehD,EAAQuB,EAAQ0B,EAAgBM,GCNrD,MAAMC,EAA+B,CAACxD,EAAQc,KAC5C+B,EAAY7C,EAAQc,GACpBwC,EAA0BtD,EAAQc,EAAM,aA6CpC2C,EAAwB,CAACzD,EAAQc,KACrCwC,EAA0BtD,EAAQc,EAAM,iBAClC4C,EAAiB7B,EAAe7B,EAAQc,EAAM,eACpD+B,EAAY7C,EAAQc,GACS,gBAAzB4C,SAAAA,EAAgB1C,MAAiB,OAC7B2C,EAAW5B,EAAU/B,EAAQ0D,GAC/BC,GAAUC,EAAY5D,EAAQ2D,EAAUjD,SAGxCmD,EAAW/C,EAAKO,QAAQC,KAAKC,GACJ,OAAtBA,EAAOC,KAAKC,OAGnBoC,GAC0B,WAAxBA,EAASpC,MAAMT,MAA6C,WAAxB6C,EAASpC,MAAMT,MAErDhB,EAAO0B,KAAK,CACVT,KAAM,eACNC,qDACAC,IAAK0C,EAAS1C,YAIZ2C,EAAajC,EAAe7B,EAAQc,EAAM,kBAC3CgD,cACH9D,EAAO0B,KAAK,CACVT,KAAM,eACNC,4CACAC,IAAKL,EAAKK,YAKRH,KAAEA,GAAS8C,EAEF,WAAT9C,GAA8B,SAATA,GACzBhB,EAAO0B,KAAK,CACVT,KAAM,eACNC,kEACAC,IAAKL,EAAKK,OAqBV4C,EAA6C,CACjDC,WAvG+B,CAAChE,EAAQc,KACxCwB,EAAqBtC,EAAQgC,EAAehC,EAAQc,GAAO,cAC3D0C,EAAoBxD,EAAQc,IAsG5BmD,gBAnGoC,CAACjE,EAAQc,KAC7C8B,EAAsB5C,EAAQgC,EAAehC,EAAQc,GAAO,cAC5D0C,EAAoBxD,EAAQc,IAmG5BoD,QAhG4B,CAAClE,EAAQc,KACrC8B,EAAsB5C,EAAQgC,EAAehC,EAAQc,GAAO,WAC5D0C,EAAoBxD,EAAQc,IA+F5BqD,aA5FiC,CAACnE,EAAQc,MJoC5C,SACEd,EACAc,EACAyB,MAGa,OAATzB,IAEJA,EAAOgB,EAAS9B,EAAQc,QAGnB,IAAIuB,KAAWvB,EAAKqB,SACvBS,EAAsB5C,EAAQqC,EI/C4B,WAA5D+B,CAAsBpE,EAAQgC,EAAehC,EAAQc,IACrD0C,EAAoBxD,EAAQc,IA4F5BuD,MAzF0B,CAACrE,EAAQc,KACnCoB,EAAgBlC,EAAQgC,EAAehC,EAAQc,IAC/C0C,EAAoBxD,EAAQc,IAwF5BwD,WArF+B,CAACtE,EAAQc,KACxCwB,EAAqBtC,EAAQgC,EAAehC,EAAQc,IACpD0C,EAAoBxD,EAAQc,IAqF5ByD,mBAlFuC,CAACvE,EAAQc,KAChD0C,EAAoBxD,EAAQc,SACtB0D,EAAmB1C,EACvB9B,EACA6B,EAAe7B,EAAQc,EAAM,kBAE1B0D,MACA,IAAInC,KAAWmC,EAAiBrC,SACnCyB,EAAY5D,EAAQqC,EAAS1B,IA4E/ByC,QAASK,EACTJ,kBA7BsC,CAACrD,EAAQc,KAC/CwC,EAA0BtD,EAAQc,EAAM,2BAClC2D,EAAiB3C,EACrB9B,EACA6B,EAAe7B,EAAQc,EAAM,gBAE1B2D,MACA,IAAIC,KAAWD,EAAetC,SAAU,OACrCwC,EAAM5C,EAAU/B,EAAQ0E,GAC1BC,IACF9D,EAAQb,EAAQ2E,EAAKnE,GACrBiD,EAAazD,EAAQ2E,OAqB3B,SAASf,EACP5D,EACAc,EACA8D,EAA0BhE,SAEpBI,KAAEA,EAAFY,WAAQA,GAAef,EAAQb,EAAQc,EAAM8D,GAC7C5D,GAAQY,aCxJd5B,EACAc,OAEI+D,EAAO,IAAIpE,QACV,IACHe,MAAMC,MAAEA,GADDN,IAEPA,KACGL,EAAKO,QACJwD,EAAKlD,IAAIF,IACXzB,EAAO0B,KAAK,CACVT,KAAM,eACNC,QAAS,gDACTC,IAAKA,IAGT0D,EAAKC,IAAIrD,GD0IXsD,CAAmB/E,EAAQ4B,GAC3BmC,EAAS/C,GAAMhB,EAAQ4B,sCAGHoD,UACdhF,EAAsB,OACxBiF,MAEFA,EAAMC,QAAMF,EAAS,CACnBG,QAAQ,IAEV,MAAOC,GACPpF,EAAO0B,KAAK,CACVT,KAAM,eACNoE,KAAMD,EAAEC,UAGRJ,GAAKrB,EAAY5D,EAAQiF,EAAIK,MAC7BtF,EAAOoC,SAAW6C,EAAK,MAAM,IAAIpF,EAAUG,UACxCuF,WAASN"}